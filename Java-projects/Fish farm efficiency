### Fish feeding efficiency test cage

public class CageData {
	//Instantiate our private variables
	private String cageName;
	private String month;
	private double[] theArray;
	private double totalFeed;

	public CageData(String cageNameIn, String monthIn, double[] theArrayIn) throws CageDataException{
		// Checks to see if we're using an int before parseint, then checks if it is between 10 and 99
		if (cageNameIn.length() != 3)
			throw new CageDataException("Illegal cage number");
		if (Character.isDigit(cageNameIn.charAt(1)) && Character.isDigit(cageNameIn.charAt(2))) {
			int numName = Integer.parseInt(cageNameIn.substring(1,3));
			if ((numName <= 10) || (numName >= 99))
				throw new CageDataException("Illegal cage number");
		}
		else
			throw new CageDataException("Illegal cage number");
		// Makes sure the cage designation is a three character code with letter 'A' or 'B'
		if(cageNameIn.charAt(0) != 'A' && cageNameIn.charAt(0) != 'B')
			throw new CageDataException("Illegal cage letter");
		// If no errors are found found then assign
		this.cageName = cageNameIn;

		//	Below are the exceptions for the month data supplied
		//	If the provided data is not within the scope of the exceptions,
		//	then throw the CageDataException to state invalid entry.
		switch(monthC(monthIn, theArrayIn.length)) {
		case 0:
			this.month = monthIn;
			break;
		case 1:
			throw new CageDataException("Illegal month name");
		case 2:
			throw new CageDataException("Food amounts array wrong length");
		}			
		// Check if the data in the array is within given specifications
		if (weightCheck(theArrayIn) == 0)
			this.theArray = theArrayIn.clone();
		else
			throw new CageDataException("Illegal food amount: "+ weightCheck(theArrayIn));

		this.totalFeed = setFoodSum(this.theArray);
	}
	//This function tests to see if it is a valid month. return 0 if good, 1 if name is wrong, 2 if len is wrong

	private int monthC(String month, int monthlength) {
		if (month.equals("January") ||
				month.equals("March") ||
				month.equals("May") ||
				month.equals("July") ||
				month.equals("August") ||
				month.equals("October") ||
				month.equals("December")) {

			if (monthlength == 31)
				return 0;
			return 2;

		}
		else if (month.equals("April") ||
				month.equals("June") ||
				month.equals("September") ||
				month.equals("November")) {

			if (monthlength == 30)
				return 0;
			return 2;
		}

		else if (month =="February") {
			if (monthlength == 28 ||
					monthlength == 29)
				return 0;		
			return 2;
		}
		else
			return 1;
	}
	//Checks to see if the weight provided does not exceed the limitations, returns True or False if acceptable or not
	private double weightCheck(double[] fishCageData) {
		for (int i=0; i<fishCageData.length; i++){
			if (fishCageData[i] >= 2000 || fishCageData[i] <= 0)
				return fishCageData[i];
		}
		return 0;
	}

	//Checks for equality between two CageData objects, designation and name

	public boolean equals(CageData cageC){
		if (!this.month.equals(cageC.getMonth())) return false;
		if (!this.cageName.equals(cageC.getCageName())) return false;
		return true;
	}

	@Override
	public String toString() {

		String s = "Data for " + this.cageName + ", for " + this.month + ": " + this.totalFeed + " kg total feed.";

		return s;
	}

	//CompareTo will compare CageData objects on the basis of total food/month
	public double compareTo(CageData other) {
		double thisFeed = this.totalFeed;
		double thatFeed = other.getFoodSum();

		return thisFeed - thatFeed;
	}//end compareTo
	@Override
	public CageData clone() {
		CageData cageDataCopy = new CageData();
		cageDataCopy.cageName = this.cageName;
		cageDataCopy.month = this.month;
		cageDataCopy.theArray = new double[this.theArray.length];
		for (int i = 0; i < this.theArray.length; i++)
			cageDataCopy.theArray[i] = this.theArray[i];
		cageDataCopy.totalFeed = this.getFoodSum();

		return cageDataCopy;
	}//end Clone
	public CageData() {}

	//Setter and Getter methods used below

	public double getFoodSum() {
		return this.totalFeed;
	}//end setFoodsum

	private double setFoodSum(double[] data) {
		double total = 0;
		for (int i = 0; i < data.length; i ++){
			total += data[i];	
		}
		return total;
	}//end setFoodSum

	//Accessor Methods
	public String getCageName() {
		return this.cageName;
	}
	public double[] getFoodAmounts() {
		return this.theArray.clone();
	}
	public String getMonth() {
		return this.month;
	}	
} //end CageData


### error for cage

public class CageDataException extends Exception {
	public CageDataException(String message) {
		super(message);// this neat super() method calls the parent constructor
	}
}


### Test cage total data

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;

public class TestCageDataStart {

	public static double[] readData(String filename) {
		BufferedReader reader;
		String line;
		ArrayList<Double> arr = new ArrayList<Double>();
		try {
			reader = new BufferedReader(new FileReader("C:\\Users\\Nathan\\Documents\\" + filename));
			while ((line = reader.readLine()) != null) {
				arr.add(Double.parseDouble(line));
			}
			reader.close();
		} catch (IOException e) {
			e.printStackTrace();
			//System.out.println(" Error: Something happened when reading the file.");
		}
		double[] x = new double[arr.size()];
		for (int i = 0; i < arr.size(); i++) {
			x[i] = arr.get(i);
		}
		return x;
	} // end readData

	public static void main(String[] args) {

		String cageName;
		String month;
		double[] dataA;
		double[] dataB;
		double[] dataOut;
		CageData cageA = null;
		CageData cageB = null;
		CageData illegalCage = null;
		
		// Create two CageData objects that should both be legal
		cageName = "A16";
		month = "June";
		dataA = readData(cageName + month + ".csv");
		if (dataA == null) {
			System.err.println("Cannot read A16 data file! Exiting program.");
			return;
		}			
		try {
			cageA = new CageData(cageName, month, dataA);
		} catch (CageDataException e) {
			System.err.println("Should not get error here!");
		}
		cageName = "B12";
		month = "August";
		dataB = readData(cageName + month + ".csv");
		if (dataB == null) {
			System.err.println("Cannot read B12 data file! Exiting program.");
			return;
		}			
		try {
			cageB = new CageData(cageName, month, dataB);
		} catch (CageDataException e) {
			System.err.println("Should not get error here!");
		}
		
		// Test accessors and toString
		System.out.println(cageA);
		System.out.println("Cage name: " + cageA.getCageName());
		System.out.println("Food sum: " + cageA.getFoodSum());
		System.out.println("Month: " + cageA.getMonth());
		
		// Test data array accessor and privacy leaks
		dataOut = cageA.getFoodAmounts();
		System.out.println("\nInitial values at first location (should be the same):");
		System.out.println("Local input weight: " + dataA[0] + ", remote: " + dataOut[0]);
		dataA[0] = 1000;
		dataOut = cageA.getFoodAmounts();
		System.out.println("Change input array (should be different):");
		System.out.println("Local input weight: " + dataA[0] + ", remote: " + dataOut[0]);
		dataOut[0] = 2000;
		double[] anotherDataOut = cageA.getFoodAmounts();
		System.out.println("Change local copy (should be different):");
		System.out.println("Local input weight: " + dataOut[0] + ", remote: " + anotherDataOut[0]);
		
		// Test compareTo, equals and clone.
		System.out.println("\n" + cageB);
		System.out.println(cageB.compareTo(cageA));
		System.out.println(cageA.compareTo(cageB));		
		System.out.println(cageB.equals(cageA));
		CageData cageCopy = cageA.clone();
		System.out.println(cageCopy);
		System.out.println(cageA.compareTo(cageCopy));
		System.out.println(cageA.equals(cageCopy));
		
		// Testing exceptions.  These should all fail for different reasons:
		String[] illegalFilesCageNames = {"F12", "A112", "A12", "A55", "A57", "A##"};
		String[] illegalFilesMonthNames = {"August", "August", "Foobar", "August", "December", "December"};
		System.out.println("\nTesting exceptions:");
		for (int i = 0; i < 6; i++) {
			dataA = readData(illegalFilesCageNames[i] + illegalFilesMonthNames[i] + ".csv");
			if (dataA != null) {
				try {
					illegalCage = new CageData(illegalFilesCageNames[i], illegalFilesMonthNames[i], dataA);
					System.out.println(illegalCage);  // Should never get here
				} catch (CageDataException e) {
					System.err.println(e.getMessage());
				}
			}
			else
				System.err.println("Cannot read file: " + i);
		} // end for
		
	} // end main

} // end TestCageData class

/* OUTPUT:
Data for cage A16, for June: 1509.0 kg total feed.
Cage name: A16
Food sum: 1509.0
Month: June

Initial values at first location (should be the same):
Local input weight: 42.9, remote: 42.9
Change input array (should be different):
Local input weight: 1000.0, remote: 42.9
Change local copy (should be different):
Local input weight: 2000.0, remote: 42.9

Data for cage B12, for August: 6525.0 kg total feed.
5016
-5016
false
Data for cage A16, for June: 1509.0 kg total feed.
0
true

Testing exceptions:
Illegal cage letter!
Illegal cage number!
Illegal month name!
Food amounts array wrong length!
Illegal food amount: -7.3
Illegal cage designation!

*/
